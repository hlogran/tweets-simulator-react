{"version":3,"sources":["assets/twitter-logo.png","components/Header/index.js","components/ModalContainer/index.js","components/FormSendTweet/index.js","components/SendTweet/index.js","utils/constants.js","components/Tweet/index.js","components/ListTweets/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","TwitterLogo","alt","ModalContainer","props","isOpenModal","closeModal","children","Modal","open","onClose","closeAfterTransition","FormSendTweet","sendTweet","useState","name","tweet","formValue","setFormValue","onSubmit","event","onChange","target","value","FormControl","FormGroup","TextField","type","placeholder","margin","multiline","rows","Button","SendTweet","setToastProp","allTweets","setIsOpenModal","Fab","color","aria-label","onClick","preventDefault","allTweetArray","time","moment","now","push","localStorage","setItem","JSON","stringify","text","Tweet","index","deleteTweet","Card","CardContent","format","ListTweets","length","Grid","container","spacing","map","key","item","xs","App","toastProps","setAllTweets","reloadTweets","setReloadTweets","useEffect","allTweetsStorage","getItem","allTweetsArray","parse","Container","maxWidth","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e6f30ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-logo.400dc885.png\";","import React from \"react\";\r\nimport TwitterLogo from \"../../assets/twitter-logo.png\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <img src={TwitterLogo} alt=\"Tweets Simulator\" />\r\n      <h1>Tweets Simulator</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function ModalContainer(props) {\r\n  const { isOpenModal = false, closeModal, children } = props;\r\n  return (\r\n    <Modal\r\n      className=\"modal-container\"\r\n      open={isOpenModal}\r\n      onClose={closeModal}\r\n      closeAfterTransition\r\n    >\r\n      <div>{children}</div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { FormControl, FormGroup, TextField, Button } from \"@material-ui/core\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function FormSendTweet(props) {\r\n  const { sendTweet } = props;\r\n  const [formValue, setFormValue] = useState({ name: \"\", tweet: \"\" });\r\n\r\n  const onFormChange = event => {\r\n    setFormValue({\r\n      ...formValue,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-send-tweet\">\r\n      <h2 className=\"form-send-tweet__title\">Send Tweet</h2>\r\n      <form\r\n        className=\"form-send-tweet__form\"\r\n        onSubmit={event => sendTweet(event, formValue)}\r\n        onChange={onFormChange}\r\n      >\r\n        <FormControl>\r\n          <FormGroup>\r\n            <TextField\r\n              className=\"form-send-tweet__form-name\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"User Name\"\r\n              margin=\"normal\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <TextField\r\n              className=\"form-send-tweet__form-textarea\"\r\n              type=\"text\"\r\n              name=\"tweet\"\r\n              multiline\r\n              rows=\"6\"\r\n              placeholder=\"Write your Tweet...\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Button type=\"submit\">Send Tweet</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Fab } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport moment from \"moment\";\r\nimport ModalContainer from \"../ModalContainer\";\r\nimport FormSendTweet from \"../FormSendTweet\";\r\nimport { TWEETS_STORAGE } from \"../../utils/constants\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function SendTweet(props) {\r\n  const { setToastProp, allTweets = [] } = props;\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n\r\n  const openModal = () => {\r\n    setIsOpenModal(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsOpenModal(false);\r\n  };\r\n\r\n  const sendTweet = (event, formValue) => {\r\n    event.preventDefault();\r\n    const { name, tweet } = formValue;\r\n\r\n    let allTweetArray = allTweets;\r\n\r\n    if (!name || !tweet) {\r\n      setToastProp({ open: true, text: \"WARNING: All fields are required.\" });\r\n    } else {\r\n      formValue.time = moment.now();\r\n      allTweetArray.push(formValue);\r\n      localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweetArray));\r\n      setToastProp({ open: true, text: \"Tweet Sent\" });\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"send-tweet\">\r\n      <Fab\r\n        className=\"send-tweet__open-modal\"\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        onClick={openModal}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      <ModalContainer isOpenModal={isOpenModal} closeModal={closeModal}>\r\n        <FormSendTweet sendTweet={sendTweet} />\r\n      </ModalContainer>\r\n    </div>\r\n  );\r\n}\r\n","export const TWEETS_STORAGE = \"tweet-lt\";\r\n","import React from \"react\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport moment from \"moment\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function Tweet(props) {\r\n  const {\r\n    tweet: { name, tweet, time },\r\n    index,\r\n    deleteTweet\r\n  } = props;\r\n\r\n  return (\r\n    <Card className=\"tweet\">\r\n      <CardContent>\r\n        <div className=\"tweet__header\">\r\n          <h5>{name}</h5>\r\n          <DeleteTwoToneIcon onClick={() => deleteTweet(index)} />\r\n        </div>\r\n        <p>{tweet}</p>\r\n        <div className=\"tweet__date-add-tweet\">\r\n          {moment(time).format(\"DD/MM/YYYY HH:mm\")}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Tweet from \"../Tweet\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function ListTweets(props) {\r\n  const { allTweets = [], deleteTweet } = props;\r\n\r\n  if (allTweets.length === 0) {\r\n    return (\r\n      <div className=\"list-tweets-empty\">\r\n        <h2>No tweets sent yet...</h2>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Grid container spacing={3} className=\"list-tweets\">\r\n        {allTweets.map((tweet, index) => {\r\n          return (\r\n            <Grid key={index} item xs={4}>\r\n              <Tweet tweet={tweet} index={index} deleteTweet={deleteTweet} />\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Header from \"./components/Header\";\nimport SendTweet from \"./components/SendTweet\";\nimport ListTweets from \"./components/ListTweets\";\nimport { TWEETS_STORAGE } from \"./utils/constants\";\n\nfunction App() {\n  const [toastProps, setToastProp] = useState({ open: false, text: null });\n  const [allTweets, setAllTweets] = useState([]);\n  const [reloadTweets, setReloadTweets] = useState(false);\n\n  useEffect(() => {\n    const allTweetsStorage = localStorage.getItem(TWEETS_STORAGE) || \"[]\";\n    const allTweetsArray = JSON.parse(allTweetsStorage);\n    setAllTweets(allTweetsArray);\n    setReloadTweets(false);\n  }, [reloadTweets]);\n\n  const deleteTweet = index => {\n    allTweets.splice(index, 1);\n    setAllTweets(allTweets);\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\n    setReloadTweets(true);\n  };\n\n  return (\n    <Container className=\"tweets-simulator\" maxWidth={false}>\n      <Header />\n      <SendTweet setToastProp={setToastProp} allTweets={allTweets} />\n      <ListTweets allTweets={allTweets} deleteTweet={deleteTweet} />\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\"\n        }}\n        open={toastProps.open}\n        autoHideDuration={1500}\n        message={<span id=\"message-id\">{toastProps.text}</span>}\n        onClose={() => {\n          setToastProp({ open: false, text: toastProps.text });\n        }}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}